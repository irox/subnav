// Copyright Ian Roxborough 2010.
#include <cstdlib>
#include <iostream>
#include <fstream>

#include <cmath>

#include "ins6DofKalman.h"
#include "os5500p.h"

extern "C" {
void os5500GetABC(float hpr[3]);
void os5500GetXYZ(float hpr[3]);
void os5500Init(char *);
void os5500GetABCnXYZ(float hpr[3], float xyz[3]);
}



using namespace std;
using namespace Kalman;

float adjustPitch(float rawPitch) {
  return rawPitch;
}

float adjustRoll(float rawRoll) {
  if (rawRoll > 90) {
    return -(180.0 - sqrt(rawRoll*rawRoll));
  } else if (rawRoll < -90.0) {
    return (180.0 - rawRoll);
  }

  return rawRoll;
}

float adjustHeading(float rawHeading) {

  if (rawHeading > 180.0) {
    return rawHeading - 360.0;
  }

  return rawHeading;
}

int main() {

        ifstream dataInput;
        ofstream dataOutput;
        std::string tmpStr;

  const unsigned NTRY = 10000;
  //      const unsigned n = 4;   //nb states
  //      const unsigned m = 2;   //nb measures

  SixDofEKF filter;

  float xyz[3];
  float hpr[3];

  static const double _P0[] = {1, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 1,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 1,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 1, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 1,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  1, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 1, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 1,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  1, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 1, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 1  };
 
  static const double _P1[] = {0.0000e+00,   2.0000e-01,   2.0000e-02,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   2.0000e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   2.0000e-01,   2.0000e-02,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   1.0000e+00,   2.0000e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   2.0000e-01,   2.0000e-02,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   2.0000e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               6.6383e+00,   0.0000e+00,   0.0000e+00,   5.1898e-03,   0.0000e+00,   0.0000e+00,  3.8868e-03,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               6.5006e+00,   0.0000e+00,   0.0000e+00,   1.3579e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               7.3458e+00,   0.0000e+00,   0.0000e+00,  -6.6368e+00,   0.0000e+00,   0.0000e+00,   2.3222e-02,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,
                               6.7030e-01,   0.0000e+00,   0.0000e+00,   7.4184e-01,   0.0000e+00,   0.0000e+00,  7.4198e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,   0.0000e+00,
                              -7.4164e-01,   0.0000e+00,   0.0000e+00,   6.7057e-01,   0.0000e+00,   0.0000e+00,   1.7449e-02,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00,   0.0000e+00,
                               2.5818e-02,   0.0000e+00,   0.0000e+00,   2.5413e-03,   0.0000e+00,   0.0000e+00,   9.9966e-01,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.0000e+00 };

  static const double _P2[] = {1, 2, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 1,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 1,  0, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 1, 0,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 1,  0, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  1, 0, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 1, 0,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 1,  0, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  1, 0, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 1, 0,
                               0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 1  };

  static const double _P3[] = {
3.4785e-03, 0.0000e+00, 0.0000e+00, 3.4562e-03, 0.0000e+00, 6.7858e-07, 3.1813e-03, 2.1114e-05, 1.9607e-06, 1.2122e-04,-6.8071e-06, 1.1633e-04, 2.0799e-03, 5.2129e-04,-7.0396e-05
,0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00
,0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00
,3.4562e-03, 0.0000e+00, 0.0000e+00, 3.4356e-03, 0.0000e+00, 7.1905e-07, 3.1765e-03, 2.2356e-05, 2.0871e-06, 1.2254e-04,-1.7910e-06, 1.0697e-04, 2.0843e-03, 5.2263e-04,-7.8018e-05
,0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00
,6.7858e-07, 0.0000e+00, 0.0000e+00, 7.1905e-07, 0.0000e+00, 1.2806e-06, 9.0667e-07, 1.2993e-06, 3.8179e-06,-1.7900e-08,-8.4973e-08,-1.2195e-07,-1.4922e-05,-1.1440e-05,-3.4409e-06
,3.1813e-03, 0.0000e+00, 0.0000e+00, 3.1765e-03, 0.0000e+00, 9.0667e-07, 3.2622e-03, 5.5167e-05, 5.9069e-06, 1.3324e-04,-9.1434e-05, 1.5249e-05, 2.2518e-03, 8.2379e-04,-9.7880e-04
,2.1114e-05, 0.0000e+00, 0.0000e+00, 2.2356e-05, 0.0000e+00, 1.2993e-06, 5.5167e-05, 1.0612e-05, 4.4746e-06,-1.5885e-07,-6.7035e-06,-1.0898e-05, 2.8880e-05, 5.6446e-05,-1.9335e-04
,1.9607e-06, 0.0000e+00, 0.0000e+00, 2.0871e-06, 0.0000e+00, 3.8179e-06, 5.9069e-06, 4.4746e-06, 1.3387e-05,-5.1703e-08,-2.3685e-07,-3.3902e-07,-4.5035e-05,-2.7840e-05,-3.6273e-05
,1.2122e-04, 0.0000e+00, 0.0000e+00, 1.2254e-04, 0.0000e+00,-1.7900e-08, 1.3324e-04,-1.5885e-07,-5.1703e-08, 1.6304e-04, 5.7479e-06,-5.0767e-06,-9.6976e-06,-4.0761e-06, 2.3499e-06
 -6.8071e-06, 0.0000e+00, 0.0000e+00,-1.7910e-06, 0.0000e+00,-8.4973e-08,-9.1434e-05,-6.7035e-06,-2.3685e-07, 5.7479e-06, 1.5218e-04,-2.0073e-05,-2.3611e-05,-2.4579e-05, 4.6127e-05
,1.1633e-04, 0.0000e+00, 0.0000e+00, 1.0697e-04, 0.0000e+00,-1.2195e-07, 1.5249e-05,-1.0898e-05,-3.3902e-07,-5.0767e-06,-2.0073e-05, 1.4596e-04,-6.1994e-05,-2.5455e-05, 7.5757e-05
,2.0799e-03, 0.0000e+00, 0.0000e+00, 2.0843e-03, 0.0000e+00,-1.4922e-05, 2.2518e-03, 2.8880e-05,-4.5035e-05,-9.6976e-06,-2.3611e-05,-6.1994e-05, 8.8814e-03,-2.6458e-03,-1.1030e-03
,5.2129e-04, 0.0000e+00, 0.0000e+00, 5.2263e-04, 0.0000e+00,-1.1440e-05, 8.2379e-04, 5.6446e-05,-2.7840e-05,-4.0761e-06,-2.4579e-05,-2.5455e-05,-2.6458e-03, 7.1504e-03,-3.7108e-03

};
  Vector x(15);
  Matrix P0(15, 15, _P2);
  Vector z(6);

  // Initialise state vector.
//  os5500Init("os5500.sample");
  os5500Init(NULL);
  os5500GetXYZ(xyz);
  os5500GetABC(hpr);

  x(1) = 0.0;
  x(2) = 0.0;
  x(3) = 0.0;
  x(4) = 0.0;
  x(5) = 0.0;
  x(6) = 0.0;
  x(7) = 0.0;
  x(8) = 0.0;
  x(9) = 0.0;
  x(10) = - adjustPitch(hpr[1]) / 57.29578; // hpr[1];
  x(11) = adjustHeading(hpr[0]) /*hpr[0]*/ / 57.29578;
  x(12) = hpr[2] / 57.29578;
  x(13) = xyz[0] * 9.8;
  x(14) = xyz[1] * 9.8;
  x(15) = xyz[2] * 9.8;

  filter.init(x, P0);
 
//  cout << "xp(" << ":," << 1<<") = " << filter.getX()<<endl;
 
  ofstream data;
  data.open ("/tmp/ins.dat");

  float chosenHeading = hpr[0];
  float chosenHpr[3] = { hpr[0], hpr[1], hpr[2] };
  float lastChosenHpr[3] = { hpr[0], hpr[1], hpr[2] };
  float lastHeading = hpr[0];

  float lastHpr[3] = { hpr[0], hpr[1], hpr[2] };

  int changeCount = 0;
  int changeCounta[3] = { 0, 0, 0 };

//  double accel = 0.0 ;
  for (int i = 2; i <= NTRY; ++i) {
/*    if (i<41) {
      accel = accel + 0.1;
      z(1) = accel;
    } else if (i<60) {
      accel = accel - 0.2;
      z(1) = accel;
    } else {
      z(1) = 0.0;
    }
*/
    if (hpr[0] == lastHeading) {
      changeCount = 0;
    } else if (changeCount > 3) {
        lastHeading = chosenHeading;
        chosenHeading = hpr[0];
        changeCount = 0;
    } else {
      // TODO(irox): Keep averaging possible new heading.
        changeCount++;
    }

    // Smooth 'glitches' out of angle readings.
    for (int a = 0; a < 3; a++) {
    //  if (hpr[a] == lastChosenHpr[a]) {
    //    changeCounta[a] = 0;
    //  } else if (changeCounta[a] > 3) {
    //    lastChosenHpr[a] = chosenHpr[a];
        chosenHpr[a] = hpr[a];
    //    changeCounta[a] = 0;
   //   } else {
   //     changeCounta[a]++;
   //   }
         

    }


    Vector u(1, 0.0);

 //   os5500GetXYZ(xyz);
    os5500GetABCnXYZ(hpr, xyz);

    z(1) = - adjustPitch(chosenHpr[1]) / 57.29578;
    z(2) = adjustHeading(chosenHpr[0]) /*hpr[0]*/ / 57.29578;
    z(3) = chosenHpr[2] / 57.29578;
    z(4) = xyz[0] * 9.8; 
    z(5) = xyz[1] * 9.8;
    z(6) = xyz[2] * 9.8;

/*    z(1) = adjustPitch(hpr[1]) / 57.29578;
    z(2) = 0.0; // adjustHeading(hpr[0]) / 57.29578;
    z(3) = 90 / 57.29587; //hpr[2] / 57.29578;
    z(4) = 0; // xyz[0] * 9.8; 
    z(5) = 9.8; //xyz[1] * 9.8;
    z(6) = 0; //xyz[2] * 9.8;
*/

    filter.step(u, z);

    Vector xn(15);

    xn  = filter.getX();
//    cout << "xp(" << ":," << i<<") = " << filter.getX()<<endl;
//    cout << "HPR(" << z(2) * 57.29578 << "(" << hpr[0] << "), " << z(1) * 57.29578 << ", " << z(3) * 57.29578 << ")" << endl;
    float aSize = sqrt( xn(1) * xn(1) + xn(4) * xn(4) + xn(7) * xn(7) );

//    cout << "count(" << i << ")" << endl << "Accel(" << aSize << ")" << endl << i << "  Accelcomp(" << xn(1) << ",\t " << xn(4) << ",\t " << xn(7) << ")" << endl << i << "  Velocity(" << xn(2) << ",\t " << xn(5) << ",\t " << xn(8) << ")" << endl << "Distance(" << xn(3) << ", " << xn(6) << ", " << xn(9) << ")" << endl;

    if (i >  0 /*15*/) { 
      data << i * 0.1 << " " << xyz[0] << " " << xyz[1] << " " << xyz[2]  << "     " << xn(1) << " " << xn(4) << " " << xn(7) << "     " << xn(2) << " " << xn(5) << " " << xn(8) << " " << adjustHeading(hpr[0]) << " " << hpr[1] << " " << hpr[2] /* - lastHpr[2] */ << " " << xn(3) << " " << xn(6) << " " << xn(9) << endl;
    }

    lastHpr[0] = hpr[0]; 
    lastHpr[1] = hpr[1];
    lastHpr[2] = hpr[2];

  }    
}

